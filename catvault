#!/usr/bin/env bash

#
# catvault: read a secret from ZoHo vault
#

set -eou pipefail

# Parse arguments. One positional argument is the secret name. One optional flag, -r, prints the secret in raw format.
raw=false
while getopts ":r" opt; do
    case ${opt} in
        r )
            raw=true
            ;;
        \? )
            echo "Usage: catvault [-r] secretname"
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))
secretname=$1

# Ensure gum is installed
if ! command -v gum &> /dev/null; then
    echo "gum is required to run this script. Please install gum."
    exit 1
fi

# Ensure jq is installed
if ! command -v jq &> /dev/null; then
    echo "jq is required to run this script. Please install jq."
    exit 1
fi

# Ensure the user is logged in to ZoHo vault. This is a one-time operation.
if zv list category 2>&1 | grep -q "not logged in"; then
    zv login --config-path ~/.config
fi

# Ensure the vault is unlocked. 
if zv list category 2>&1 | grep -q -i "Please Login into ZoHo Vault"; then
    zv unlock
fi

# fetch all the secrets
# this specific invocation of search "tricks" zoho into returning all data
# secrets_json=$(zv search -k "$secretname" -V -o json)
secrets_json=$(cat secret.json)

# verify we got a sensible json response , exit if not
if ! echo "$secrets_json" | jq -e > /dev/null 2>&1; then
    echo "Invalid JSON received. Exiting."
    exit 1
fi

# Obtain the secret ID from the json for the object with the secretname
result=$(echo "$secrets_json" | jq -r --arg secretname "$secretname" '.[] | select(.secretname == $secretname) | .secretData')
if [[ $raw == true ]]; then
    echo "$result"
else
    echo "$result" | jq
fi